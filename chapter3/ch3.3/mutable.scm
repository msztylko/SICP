(define (cons x y)
    (define (set-x! v) (set! x v))
    (define (set-y! v) (set! y v))
    (define (dispatch m)
        (cond ((eq? m `car) x)
              ((eq? m `cdr) y)
              ((eq? m `set-car!) set-x!)
              ((eq? m `set-cdr!) set-y!)
              (else
                (error "Undefined operation: CONS" m))))
    dispatch)

(define (car p) (p 'car))
(define (cdr p) (p `cdr))
(define (set-car! p v)
    ((p `set-car!) v))
(define (set-cdr! p v)
    ((p `set-cdr!) v))

;; test
(define a (cons 3 6))
(display a)
(newline)
(display (car a))
(newline)
(display (cdr a))
(newline)
(set-car! a 2)
(display (car a))
(newline)
(set-cdr! a 9)
(display (cdr a))
(newline)
